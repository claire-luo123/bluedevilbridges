@page "/statistics"
@inject PairingStatisticsService PairingStatisticsService

<head>
    <meta charset = "UTF-8">
    <meta name = "viewport" content="width=device-width, initial-scale=1.0">
    <title>Past Matches</title>
    <link rel="stylesheet" href="styles.css">
</head>

<body>
    <div class="row boxes">
        <div class="col-12">
            <button class="btn btn-info" @onclick="ChangeStatus">
                <span class="button-content">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bar-chart-line-fill align-middle" viewBox="0 0 16 16">
                        <path d="M11 2a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v12h.5a.5.5 0 0 1 0 1H.5a.5.5 0 0 1 0-1H1v-3a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v3h1V7a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v7h1z"/>
                    </svg>
                    <span class="align-middle">Statistics</span>
                </span>
                <span>@(closed ? "+" : "-")</span>
            </button>
            <div class="collapse @(closed ? "" : "show")">
 
                    <div class="stats-date">
                        <p>Date: @GetDate()</p>
                    </div>
                    <div class="stats-container">
                        <div class="stats">
                            @* use pie chart component *@
                            <PieChart Chartdata="pieSeriesData"/>
                        </div>
                        <div class="stats">
                            @* use histogram component *@
                            <StatsHistogram Data="Data" />
                        </div>
                    </div>
                    
                
            </div>
        </div>
    </div>
</body>



<style>
body {
    background-color: #f0f0f0;
}
.boxes {
    background-color: white;
    border-radius: 10px;
    align-items: center;
    padding: 40px;
    width: auto;
    margin: auto;
}
.boxheaders {
    text-align: center;
    font-weight: bold;
    color: #012169; 
}
.stats {
    padding: 10px;
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    margin-top: 10px;
    background-color: transparent;
    border: none; 
    flex: 1;


}
.stats-date {
    font-weight: bold;
    color: #012169;
    font-size: 1.5em;
    font-family: Arial, sans-serif;

}
.btn-info {
    background-color: #fff; 
    color: #012169; 
    border-color: #fff; 
    text-align: center;
    font-weight: bold;
    font-size: 1.5em;
    font-family: Arial, sans-serif;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
}

.btn-info .button-content {
    display: flex;
    align-items: center; 
}

.btn-info svg {
    margin-right: 5px; 
}

.btn-info:hover {
    background-color: #fff;
    color: #012169;
    border-color: #fff;
}
.stats-container {
    display: flex;
    justify-content: space-between;
    width: 100%;
}

</style>



@code{
    [Parameter]
    public bool PairingComplete {get; set;}
    [Parameter]
    public int mostRecentID {get; set;}
    public Dictionary<string, int> MenteeYear {get; set;}
    public Dictionary<string, int> MenteeMajors {get; set;}
    public Dictionary<string, int> MenteeMinors {get; set;}
    public Dictionary<string,int> MenteeCertificates {get; set;}
    public Dictionary<string,int> MenteeState{get; set;}
    public Dictionary<string,int> MenteeIndustry {get; set;}
    public Dictionary<string,int> MenteeGraduate {get; set;}
    public Dictionary<string,int> MenteeInterests {get; set;}
    public Dictionary<string,int> MenteeEthnicity {get; set;}
    public int FirstGen {get; set;}
    public int International{get; set;}

    public bool closed = true;

    public List<StudentRecord> CurMatches{get; set;}
    public List<int> StudentYearCount{get; set;}

    private List<PieChart.PieSeriesData> pieSeriesData;

    
     public void ChangeStatus() {
        closed = !closed;
     }

     public DateTime GetDate() {
        return DateTime.Now;
    }

    @* protected override async Task OnInitializedAsync()
    {
        if (PairingStatisticsService.StatisticsAvailable)
        {
            await LoadStatisticsAsync();
        }
    } *@

    protected override void OnParametersSet()
    {
            
            LoadStatistics();

    }

    @* once statistics are available, pull the student and alumni years from database *@

    private void LoadStatistics()
    {
        GetStudentYears();
        GetAlumniYears();
        StateHasChanged();
    }

    @* get entries in StudentRecrods table from the most recent iteration based on iterationID, called in GetStudentYears() *@
    public void GetCurMatches(int id){
        CurMatches = blueDevilBridgesContext.StudentRecords.Where(a=>a.IterationID==id).ToList();
    }



    //fill in array storing number of students from each grade (sophomore, junior, senior)
    public void GetStudentYears() {
        StudentYearCount = Enumerable.Repeat(0, 3).ToList();
        GetCurMatches(mostRecentID); //call GetCurMatches method
        foreach(var record in CurMatches) {
            if(record.Year == "Sophomore") {
                StudentYearCount[0]++;
            }
            if(record.Year == "Junior") {
                StudentYearCount[1]++;
            }
            if(record.Year == "Senior") {
                StudentYearCount[2]++;
            }
        }

        pieSeriesData = new List<PieChart.PieSeriesData>
        {
            new PieChart.PieSeriesData { Label = "Sophomore", Value = StudentYearCount[0]},
            new PieChart.PieSeriesData { Label = "Junior", Value = StudentYearCount[1]},
            new PieChart.PieSeriesData { Label = "Senior", Value = StudentYearCount[2]}
        };

    }


    
    public List<AlumniRecord> CurAlumni{get; set;}
    public List<int> AlumniYears { get; set; }
    public int[] yearCounter = new int[15];
    public List<StatsHistogram.MyData> Data { get; set; } = new List<StatsHistogram.MyData>();
    

        //get alumni records from database and convert to list, called in GetAlumniYears
    public void GetAlumni(int id){
        CurAlumni = blueDevilBridgesContext.AlumniRecords.Where(a=>a.IterationID==id).ToList();
    }

    //set histogram ranges and store frequency of alumni graduation years in array
    public void GetAlumniYears() {
        GetAlumni(mostRecentID);
        foreach (var record in CurAlumni) {
            if(record.Year.Equals("")) continue;
            
            List<int> years = new List<int>(); //years for a given alumni entry
            string[] parts = record.Year.Split(new string[] { "Class of " }, StringSplitOptions.RemoveEmptyEntries);

            foreach (string part in parts) {
                string yearString = part.Trim().Substring(0, 4); // get 4 characters for the year
                if (int.TryParse(yearString, out int year)) {
                    years.Add(year);
                }
            }

            foreach(int year in years) {
                if(year >= 1950 && year <= 2024) {
                    yearCounter[(year - 1950) / 5]++;
                }
            }
        }

        Data.Add(new StatsHistogram.MyData { years = "1950-1954", Count = yearCounter[0] });
        Data.Add(new StatsHistogram.MyData { years = "1955-1959", Count = yearCounter[1] });
        Data.Add(new StatsHistogram.MyData { years = "1960-1964", Count = yearCounter[2] });
        Data.Add(new StatsHistogram.MyData { years = "1965-1969", Count = yearCounter[3] });
        Data.Add(new StatsHistogram.MyData { years = "1970-1974", Count = yearCounter[4] });
        Data.Add(new StatsHistogram.MyData { years = "1975-1979", Count = yearCounter[5] });
        Data.Add(new StatsHistogram.MyData { years = "1980-1984", Count = yearCounter[6] });
        Data.Add(new StatsHistogram.MyData { years = "1985-1989", Count = yearCounter[7] });
        Data.Add(new StatsHistogram.MyData { years = "1990-1994", Count = yearCounter[8] });
        Data.Add(new StatsHistogram.MyData { years = "1995-1999", Count = yearCounter[9] });
        Data.Add(new StatsHistogram.MyData { years = "2000-2004", Count = yearCounter[10] });
        Data.Add(new StatsHistogram.MyData { years = "2005-2009", Count = yearCounter[11] });
        Data.Add(new StatsHistogram.MyData { years = "2010-2014", Count = yearCounter[12] });
        Data.Add(new StatsHistogram.MyData { years = "2015-2019", Count = yearCounter[13] });
        Data.Add(new StatsHistogram.MyData { years = "2020-2024", Count = yearCounter[14] });
        
    }



        
}